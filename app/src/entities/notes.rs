//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use super::sea_orm_active_enums::BoardEnum;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "notes")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub room_id: i32,
    pub board: BoardEnum,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    pub created_at: TimeDateTimeWithTimeZone,
    pub updated_at: TimeDateTimeWithTimeZone,
    pub deleted_at: Option<TimeDateTimeWithTimeZone>,
    pub user_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::rooms::Entity",
        from = "Column::RoomId",
        to = "super::rooms::Column::Id",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    Rooms,
    #[sea_orm(has_many = "super::upvotes::Entity")]
    Upvotes,
}

impl Related<super::rooms::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rooms.def()
    }
}

impl Related<super::upvotes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Upvotes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
